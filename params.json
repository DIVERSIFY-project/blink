{"name":"Blink","tagline":"","body":"# Welcome to the Blink's GitHub page!\r\n\r\nHere you will find more details on Blink's implementation : its structure, its source code and a step-by-step guide to recreate a Blink's virtual machine from scratch. You will also find some additional information on the results of our experiment to assess how much impact Blink has on fingerprint diversity.\r\n\r\n## Blink in a nutshell\r\n\r\nBrowser fingerprinting allows web sites and third-party companies to silently track users. The combination of uniqueness and stability of browser fingerprints make them ripe targets for exploitation. Furthermore, fingerprinting is complementary to other tracking techniques such as cookies. We introduce Blink, a moving target defense strategy against fingerprint-based user tracking. Each time a browsing session starts, Blink leverages virtualization and reconfiguration to automatically synthesize a random browsing environment (random operating system, with a random browser, and a random set of plugins and fonts). Blink automatically transfers user preferences (i.e., passwords, open tabs, bookmarks, selected plugins and fonts) from one environment to another to improve transparency and usability. This way, a user exhibits very diverse fingerprints over time without the risk of lying, but also keeps personal elements for a good browsing experience.\r\n\r\n##Database for synthesizing browsing environment\r\n###List of plugins \r\n* LibreOffice Plug-in\r\n* QuickTime Plug-in 7.6.6\r\n* Java(TM) Plug-in 11.5.2\r\n* Java(TM) Plug-in 10.55.2\r\n* Java(TM) Plug-in 1.6.0_45\r\n* IcedTea-Web Plugin\r\n* Estonian ID card plugin\r\n* NPAPI Plugins Wrapper 1.4.4\r\n* iTunes Application Detector\r\n* Gnome Shell Integration\r\n* FreeWRL X3D/VRML\r\n* Spice Firefox Plugin 2.8.90\r\n* MozPlugger 1.14.3\r\n* Shockwave Flash 12.1 r720 (libkpartsplugin.so)\r\n* Shockwave Flash 11.1 r102 (libtotem-vegas-plugin.so)\r\n* Shockwave Flash 11.2 r202 (libflashplayer.so)\r\n* Shockwave Flash 10.1 r999 (libgnashplugin.so)\r\n* KParts Plugin\r\n* gxine starter plugin\r\n* DjView-4.9\r\n* X2GoClient Plug-in 4.0.2.0\r\n* Google Talk Plugin Video Renderer\r\n* Xine Plugin\r\n* Google Talk Plugin\r\n* VLC Web Plugin\r\n* Skype Buttons for Kopete\r\n* PackageKit\r\n* Windows Media Player Plug-in\r\n* mplayerplug-in is now gecko-mediaplayer 1.0.9\r\n* RealPlayer 9\r\n* DivX Browser Plug-In\r\n* DivXÂ® Web Player\r\n* VLC Multimedia Plugin\r\n* Windows Media Player Plug-in 10\r\n* QuickTime Plug-in 7.6.9\r\n\r\n###List of browsers\r\n* Firefox 28.0 (stable)\r\n* Firefox 29.0 (beta)\r\n* Firefox 30.0 (aurora)\r\n* Chrome 34 (stable)\r\n* Chrome 35 (beta)\r\n* Chrome 36 (unstable)\r\n\r\n###List of OS\r\n* Fedora 20 32 bits\r\n* Fedora 20 64 bits\r\n* Ubuntu 14.04 32 bits\r\n* Ubuntu 14.04 64 bits\r\n\r\n###List of fonts\r\nSee database for the complete list of files.\r\n\r\n## Implementation\r\n\r\n### Directories structure\r\nThere is two major parts in the structure of Blink.  \r\nThe first is our own database of fonts, plugins and correctly configured browsers. When we build a new browsing environment, we randomly choose files from these directories.  This database was built according to fingerprints we gathered from our experiment. The bigger our database is, the more diverse and unique our created browsing environments will be.  \r\nThe second part contains all of our configured VMs with the \"Shared\" folder that is being mounted automatically in the filesystem of each VM.  \r\nWith this structure, it is easy to manipulate the files we need and have the perfect browsing environment that suits one needs.\r\n\r\n### Source code\r\nClone, fork or download our source code in the Blink's repository [HERE](https://github.com/breaklinkability/blink) (coming soon).\r\n\r\n### Step-by-step virtual machine creation\r\nFollow [this link](URL) to get the entire story behind the creation of a Blink virtual machine.\r\n\r\n## Additional experiment results\r\n\r\n### Benchmark\r\nFor our experiment, we measured the overhead imposed by the launch of a Blink's virtual machine. The captured time is the time needed between the event that launches the virtual machine and the moment when the browser is open and the browsing environment is fully operational. \r\nYou will find below a graph detailing the times we gathered from the environments synthesized from our 25 initial situations. The number of fonts and plugins grows for each new initial situations, thus leading to an average growing launch time.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}